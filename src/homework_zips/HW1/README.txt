# zip内ファイル構成 -------------------------------------
 - NAbasic.h ... CSV読み取り用ヘッダファイル 
 - NAbasic.c ... CSV読み取り用ヘッダファイル 
 - decimal2bin.c ... 
 - matrixproduct.c ...
 - README.txt ... このファイル

# 注意 -------------------------------------
全てのファイルは指示に従いShift-JSによってエンコードしています．
UTF-8がデフォルト設定のエディタで確認する場合は各自設定を見直してください．

# 想定実行環境 -------------------------------------
Embarcadero C++ 7.30 for Win32 & Turbo Incremental Link 6.9にてコンパイル後
Windows11(64-bit)環境にて動作確認済み

# 想定入力ファイル -------------------------------------
## decimal2bin.exe
1行1列目にひとつだけ実数値が格納されたCSV拡張子のファイル．

## matrixproduct.exe
カンマ区切りで各行，各列のデータ数が存在し，同じCSV拡張子のファイル．行列Aと行列Bで2つ．

# エラーハンドリング・免責事項 -------------------------------------
## decimal2bin.exe
空のファイルが渡された場合，「ERR: matrix[0][0] が NULL です．」の表示後エラーで終了．
複数要素が存在するCSVを渡した場合，1行1列目のみを変換し正常終了．
小数点以下が5桁を超えた場合，4桁に四捨五入され計算続行．
数字ではない文字を渡したとき，0として認識され正常終了．

## matrixproduct.exe
空のファイルが渡された場合，空行列として扱われ正常終了．
小数点以下が5桁を超えた場合，4桁に四捨五入され計算続行．
数字ではない文字が行列に含まれていた場合，0として認識され正常終了．

# コンパイル・実行方法 -------------------------------------
bcc32c（Embarcadero C++）を使用する場合.
コンパイル後の各実行ファイルはコマンドライン引数にて環境変数を渡します．
コマンドライン引数間は半角スペースを空けてください.
以下に例を示します．

## decimal2bin.exe（第一引数：コマンド，第二引数：入力CSVファイルの相対パス）
bcc32c decimal2bin.c NAbasic.c -o decimal2bin.exe
./decimal2bin.exe data/k1-input.csv

## matrixproduct.exe （第一引数：コマンド，第二引数：行列Aの入力CSVファイルの相対パス，第三引数：行列Bの入力CSVファイルの相対パス）
bcc32c matrixproduct.c NAbasic.c -o matrixproduct.exe 
./matrixproduct.exe data/k2-input1.csv data/k2-input2.csv

# 想定出力 -------------------------------------
## decimal2bin.exe
-- Info -- 
ファイル名: data/k1-input.csv
元数値: 53.375
-- OutPut -- 
sEEEEEEE EEEEdddd dddddddd... 
01000000 01001010 10110000 00000000 00000000 00000000 00000000 00000000

## matrixproduct.exe
-- Info -- 
A行列ファイル名: data/k2-input1.csv
B行列ファイル名: data/k2-input2.csv
matrixA: 
2.0000  8.0000  4.0000
3.0000  2.0000  -1.0000
7.0000  -1.0000         3.0000
matrixB:
3.0000
7.0000
-2.0000
--OutPut--
matrixOut:
54.0000
25.0000
8.0000

# レビュー観点 -------------------------------------
 -  typo はないか？
 -  命名規則にバラつきはないか？理解できるものになっているか？
 -  メモリの確保・解放を適切に行っているか？
 -  処理が冗長でないか？
 -  効率化のため活かせる構文の機能はないか？
 -  課題解決のためにコードの設計が適切か？
 