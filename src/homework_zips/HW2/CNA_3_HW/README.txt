# zip内ファイル構成 -------------------------------------
 - data/ ... サンプルデータファイル
 - NAbasic.h ... CSV読み取り用ヘッダファイル 
 - NAbasic.c ... CSV読み取り用ヘッダファイル 
 - memory_controller.h ... メモリ管理用ヘッダファイル 
 - memory_controller.c ... メモリ管理用ヘッダファイル 
 - nonlinearequation ... 本体
 - README.txt ... このファイル

# 注意 -------------------------------------
全てのファイルは指示に従いShift-JSによってエンコードしています．
UTF-8がデフォルト設定のエディタで確認する場合は各自設定を見直してください．

# 想定実行環境 -------------------------------------
Embarcadero C++ 7.30 for Win32 & Turbo Incremental Link 6.9にてコンパイル後
Windows11(64-bit)環境にて動作確認済み

# 想定入力ファイル -------------------------------------
## nonlinearequation.exe
### 関数入力csv
1行目に各項の係数，2行目にその次数を記入したcsvファイルとします．
各行の要素数はそろえてください．

例）y = x^4 -3x^2 + 5x -9
default.csv
--
1, -3, 5, -9
4, 2, 1, 0

### 区間入力csv
1行1列目に左区間，1行2列目に右区間の数値を記入したcsvとします．
例）[1, 3]
k3-input.csv
--
1, 3

# エラーハンドリング・免責事項 -------------------------------------
## decimal2bin.exe
空のファイルが渡された場合，関数の場合0で続行，区間の場合「ERR: 区間CSVデータ が 異常 です．」の表示後エラーで終了．
小数点以下が7桁を超えた場合，6桁に四捨五入され計算続行．
数字ではない文字を渡したとき，0として認識され正常終了．
空のファイルが渡された場合，空行列として扱われ正常終了．
数字ではない文字が行列に含まれていた場合，0として認識され正常終了．

# コンパイル・実行方法 -------------------------------------
bcc32c（Embarcadero C++）を使用する場合.
コンパイル後の各実行ファイルはコマンドライン引数にて環境変数を渡します．
コマンドライン引数間は半角スペースを空けてください.
以下に例を示します．

## decimal2bin.exe（第一引数：コマンド，第二引数：入力CSVファイルの相対パス）
bcc32c nonlinearequation.c lib/NAbasic.c lib/memory_controller.c -o nonlinearequation.ex
./nonlinearequation.exe data/default.csv data/k3-input.csv

# 想定出力 -------------------------------------
## nonlinearequation.exe
-- Info -- 
関数ファイル名: data/default.csv
区間ファイル名: data/k3-input.csv
関数: y = +1x^4-3x^2+5x^1-9x^0
区間入力: [1, 3]
-- OutPut --
二分探索処理...
att: 10, left: 1.000000, right: 2.000000, mid: 2.000000
att: 9, left: 1.500000, right: 2.000000, mid: 1.500000
att: 8, left: 1.750000, right: 2.000000, mid: 1.750000
att: 7, left: 1.750000, right: 1.875000, mid: 1.875000
att: 6, left: 1.750000, right: 1.812500, mid: 1.812500
att: 5, left: 1.750000, right: 1.781250, mid: 1.781250
att: 4, left: 1.750000, right: 1.765625, mid: 1.765625
att: 3, left: 1.750000, right: 1.757812, mid: 1.757812
att: 2, left: 1.750000, right: 1.753906, mid: 1.753906
att: 1, left: 1.751953, right: 1.753906, result: 1.751953
ニュートン法探索処理...
att: 10, result: 1.800000
att: 9, result: 1.755637
att: 8, result: 1.753667
att: 7, result: 1.753664
att: 6, result: 1.753664
att: 5, result: 1.753664
att: 4, result: 1.753664
att: 3, result: 1.753664
att: 2, result: 1.753664
att: 1, result: 1.753664
-- EXIT --


# レビュー観点 -------------------------------------
 -  typo はないか？
 -  命名規則にバラつきはないか？理解できるものになっているか？
 -  メモリの確保・解放を適切に行っているか？
 -  処理が冗長でないか？
 -  効率化のため活かせる構文の機能はないか？
 -  課題解決のためにコードの設計が適切か？
 